{"id":"../node_modules/@mundia/js/index.ts","dependencies":[{"name":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/tsconfig.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/example/package.json","includedInParent":true,"mtime":1664244227942},{"name":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/package.json","includedInParent":true,"mtime":1664796742231},{"name":"./chat","loc":{"line":16,"column":39},"parent":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/index.ts","resolved":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/chat.ts"},{"name":"./config","loc":{"line":17,"column":41},"parent":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/index.ts","resolved":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/config.ts"},{"name":"axios","loc":{"line":18,"column":40},"parent":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/index.ts","resolved":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/axios/index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatBunnyInstance = void 0;\nconst chat_1 = __importDefault(require(\"./chat\"));\nconst config_1 = __importDefault(require(\"./config\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nclass ChatBunnyInstance {\n    constructor(CHATBUNNY_API_KEY) {\n        this.config = new config_1.default();\n        this.config.apiKey = CHATBUNNY_API_KEY;\n    }\n    /**\n   *\n   */\n    getChats() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //TODO paginate the messages\n            //todo handle error responses\n            const params = {\n                user: this.config.user,\n            };\n            //todo dynamically switch url between development and production\n            const response = yield axios_1.default.get('http://localhost:4000/chats', {\n                params,\n                headers: {\n                    \"Authorization\": this.config.apiKey,\n                }\n            });\n            //todo handle a response that fails\n            const chats = [];\n            response.data.chats.map((chatItem) => {\n                const chat = new chat_1.default(this.config);\n                chat.config.channelId = chatItem.id;\n                chat.config.name = chatItem.name;\n                chat.config.members = chatItem.participantUserIds;\n                chat.config.lastMessage = {\n                    user: {\n                        id: chatItem.lastMessage.user.id,\n                        name: chatItem.lastMessage.user.name,\n                        avatar: chatItem.lastMessage.user.avatar,\n                    },\n                    message: {\n                        text: chatItem.lastMessage.text\n                    }\n                };\n                chats.push(chat);\n            });\n            return chats;\n        });\n    }\n    connectUser(user) {\n        this.config.user = user;\n        return this;\n    }\n    chat({ withUserId }) {\n        const chat = new chat_1.default(this.config);\n        chat.config.members = [withUserId];\n        return chat;\n    }\n    groupChat({ members, name }) {\n        const chat = new chat_1.default(this.config);\n        chat.config.members = members;\n        chat.config.name = name;\n        return chat;\n    }\n}\nexports.ChatBunnyInstance = ChatBunnyInstance;\nclass ChatBunny {\n    static getInstance(CHATBUNNY_API_KEY) {\n        return new ChatBunnyInstance(CHATBUNNY_API_KEY);\n    }\n}\nwindow.ChatBunny = {\n    getInstance: ChatBunny.getInstance\n};\nexports.default = ChatBunny;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../node_modules/@mundia/js/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,kDAA0B;AAC1B,sDAA8B;AAC9B,kDAAyB;AAYzB,MAAa,iBAAiB;IAG3B,YAAY,iBAAyB;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAM,EAAE,CAAA;QAC1B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAA;IAEzC,CAAC;IAED;;KAEC;IACK,QAAQ;;YACX,4BAA4B;YAC5B,6BAA6B;YAG7B,MAAM,MAAM,GAAG;gBACZ,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;aACxB,CAAA;YAED,gEAAgE;YAChE,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,6BAA6B,EAAE;gBAC7D,MAAM;gBACN,OAAO,EAAE;oBACN,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;iBACrC;aACH,CAAC,CAAA;YAEF,mCAAmC;YACnC,MAAM,KAAK,GAAW,EAAE,CAAA;YAExB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE;gBACvC,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;gBAClC,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC,EAAE,CAAA;gBACnC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAA;gBAChC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,kBAAkB,CAAA;gBACjD,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG;oBACvB,IAAI,EAAE;wBACH,EAAE,EAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;wBAChC,IAAI,EAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI;wBACpC,MAAM,EAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM;qBAC1C;oBACD,OAAO,EAAE;wBACN,IAAI,EAAE,QAAQ,CAAC,WAAW,CAAC,IAAI;qBACjC;iBACH,CAAA;gBAED,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEnB,CAAC,CAAC,CAAA;YACF,OAAO,KAAK,CAAA;QACf,CAAC;KAAA;IAGD,WAAW,CAAC,IAAU;QACnB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAA;QACvB,OAAO,IAAI,CAAA;IACd,CAAC;IAED,IAAI,CAAC,EAAE,UAAU,EAAa;QAC3B,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAClC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,UAAU,CAAC,CAAA;QAClC,OAAO,IAAI,CAAA;IACd,CAAC;IAED,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAkB;QACxC,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAClC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAA;QAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAA;QACvB,OAAO,IAAI,CAAA;IACd,CAAC;CACH;AAxED,8CAwEC;AAED,MAAM,SAAS;IACZ,MAAM,CAAC,WAAW,CAAC,iBAAyB;QACzC,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,CAAA;IAClD,CAAC;CACH;AAUD,MAAM,CAAC,SAAS,GAAG;IAChB,WAAW,EAAE,SAAS,CAAC,WAAW;CACpC,CAAA;AAGD,kBAAe,SAAS,CAAA","sourcesContent":["import Chat from \"./chat\";\nimport Config from \"./config\";\nimport axios from \"axios\"\nimport User from \"./user\";\n\nexport type ChatProps = {\n   withUserId: string\n}\n\nexport type GroupChatProps = {\n   members: string[]\n   name: string\n}\n\nexport class ChatBunnyInstance {\n   config: Config\n\n   constructor(CHATBUNNY_API_KEY: string) {\n      this.config = new Config()\n      this.config.apiKey = CHATBUNNY_API_KEY\n\n   }\n\n   /**\n  * \n  */\n   async getChats(): Promise<Chat[]> {\n      //TODO paginate the messages\n      //todo handle error responses\n\n\n      const params = {\n         user: this.config.user,\n      }\n\n      //todo dynamically switch url between development and production\n      const response = await axios.get('http://localhost:4000/chats', {\n         params,\n         headers: {\n            \"Authorization\": this.config.apiKey,\n         }\n      })\n\n      //todo handle a response that fails\n      const chats: Chat[] = []\n\n      response.data.chats.map((chatItem: any) => {\n         const chat = new Chat(this.config)\n         chat.config.channelId = chatItem.id\n         chat.config.name = chatItem.name\n         chat.config.members = chatItem.participantUserIds\n         chat.config.lastMessage = {\n            user: {\n               id: chatItem.lastMessage.user.id,\n               name: chatItem.lastMessage.user.name,\n               avatar: chatItem.lastMessage.user.avatar,\n            },\n            message: {\n               text: chatItem.lastMessage.text\n            }\n         }\n         \n         chats.push(chat)\n\n      })\n      return chats\n   }\n\n\n   connectUser(user: User): ChatBunnyInstance {\n      this.config.user = user\n      return this\n   }\n\n   chat({ withUserId }: ChatProps): Chat {\n      const chat = new Chat(this.config)\n      chat.config.members = [withUserId]\n      return chat\n   }\n\n   groupChat({ members, name }: GroupChatProps): Chat {\n      const chat = new Chat(this.config)\n      chat.config.members = members\n      chat.config.name = name\n      return chat\n   }\n}\n\nclass ChatBunny {\n   static getInstance(CHATBUNNY_API_KEY: string): ChatBunnyInstance {\n      return new ChatBunnyInstance(CHATBUNNY_API_KEY)\n   }\n}\n\ndeclare global {\n   interface Window {\n      ChatBunny: {\n         getInstance: (CHATBUNNY_API_KEY: string) => ChatBunnyInstance\n      };\n   }\n}\n\nwindow.ChatBunny = {\n   getInstance: ChatBunny.getInstance\n}\n\n\nexport default ChatBunny"]}},"error":null,"hash":"adc4138202391c5d0cfeb54649a02235","cacheData":{"env":{}}}