{"id":"../node_modules/@mundia/js/chat.ts","dependencies":[{"name":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/tsconfig.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/example/package.json","includedInParent":true,"mtime":1664244227942},{"name":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/package.json","includedInParent":true,"mtime":1664796742231},{"name":"./chat-config","loc":{"line":15,"column":46},"parent":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/chat.ts","resolved":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/chat-config.ts"},{"name":"axios","loc":{"line":16,"column":40},"parent":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/@mundia/js/chat.ts","resolved":"/Users/mundia/Documents/projects/chatbunny-server/sdk/react/node_modules/axios/index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chat_config_1 = __importDefault(require(\"./chat-config\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nclass Chat {\n    constructor(chatBunnyConfig) {\n        this.mainConfig = chatBunnyConfig;\n        this.config = new chat_config_1.default();\n    }\n    getId() {\n        return this.config.channelId;\n    }\n    getName() {\n        return this.config.name;\n    }\n    getMembers() {\n        return this.config.members;\n    }\n    getLastMessage() {\n        return this.config.lastMessage;\n    }\n    /**\n     *\n     */\n    getMessages() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //TODO paginate the messages\n            //todo handle error responses\n            const params = {\n                members: this.config.members,\n                channelId: this.config.channelId,\n                user: this.mainConfig.user,\n                name: this.config.name\n            };\n            //todo dynamically switch url between development and production\n            const response = yield axios_1.default.get('http://localhost:4000/messages', {\n                params,\n                headers: {\n                    \"Authorization\": this.mainConfig.apiKey,\n                }\n            });\n            //join the channel\n            this.config.socket.emit('room.join', { channelId: response.data.channelId });\n            //todo handle a response that fails\n            return response.data.messages;\n        });\n    }\n    sendMessage({ text }) {\n        this.config.socket.emit('message', {\n            text,\n            apiKey: this.mainConfig.apiKey,\n            channelId: this.config.channelId,\n            user: this.mainConfig.user,\n            members: this.config.members,\n            name: this.config.name\n        });\n    }\n    onMessage(listener) {\n        //channel is already defined so listen to the room\n        if (this.config.channelId) {\n            this.config.socket.emit('room.join', { channelId: this.config.channelId });\n        }\n        this.config.socket.on('message', (data) => {\n            //update the last message\n            if (data.success) {\n                this.config.lastMessage = {\n                    user: {\n                        id: data.user.id,\n                        name: data.user.name,\n                        avatar: data.user.avatar\n                    },\n                    message: {\n                        text: data.message.text\n                    }\n                };\n            }\n            listener && listener(data);\n        });\n    }\n    onError(listener) {\n        this.config.socket.on('error', (data) => {\n            listener && listener(data.message);\n        });\n    }\n    release() {\n        this.config.socket.emit('room.leave', { channelId: this.config.channelId });\n        this.config.socket.off('message');\n        this.config.socket.off('error');\n    }\n}\nexports.default = Chat;\n"},"sourceMaps":{"js":{"version":3,"file":"chat.js","sourceRoot":"","sources":["../node_modules/@mundia/js/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import ChatConfig from \"./chat-config\";\nimport axios from \"axios\"\nimport Config from \"./config\";\nimport User from \"./user\";\nimport Message from \"./message\";\n\n\n\n\nexport type LastMessage = {\n    user: User\n    message: Message\n}\nclass Chat {\n    // the config object for ChatBunny\n    mainConfig: Config\n    //the config object for this chat object\n    config: ChatConfig\n\n\n    constructor(chatBunnyConfig: Config) {\n        this.mainConfig = chatBunnyConfig\n        this.config = new ChatConfig()\n    }\n\n\n    getId() {\n        return this.config.channelId\n    }\n\n    getName() {\n        return this.config.name\n    }\n\n    getMembers() {\n        return this.config.members\n    }\n\n    getLastMessage(): LastMessage | undefined {\n        return this.config.lastMessage\n    }\n    /**\n     * \n     */\n    async getMessages() {\n        //TODO paginate the messages\n        //todo handle error responses\n\n\n        const params = {\n            members: this.config.members,\n            channelId: this.config.channelId,\n            user: this.mainConfig.user,\n            name: this.config.name\n        }\n\n        //todo dynamically switch url between development and production\n        const response = await axios.get('http://localhost:4000/messages', {\n            params,\n            headers: {\n                \"Authorization\": this.mainConfig.apiKey,\n            }\n        })\n\n        //join the channel\n        this.config.socket.emit('room.join', { channelId: response.data.channelId })\n\n        //todo handle a response that fails\n        return response.data.messages\n    }\n\n    sendMessage({ text }: Message) {\n\n        this.config.socket.emit('message', {\n            text,\n            apiKey: this.mainConfig.apiKey,\n            channelId: this.config.channelId,\n            user: this.mainConfig.user,\n            members: this.config.members,\n            name: this.config.name\n        });\n    }\n\n    onMessage(listener: (data: any) => void) {\n        //channel is already defined so listen to the room\n        if (this.config.channelId) {\n            this.config.socket.emit('room.join', { channelId: this.config.channelId })\n        }\n\n        this.config.socket.on('message', (data) => {\n\n            //update the last message\n            if (data.success) {\n                this.config.lastMessage = {\n                    user: {\n                        id: data.user.id,\n                        name: data.user.name,\n                        avatar: data.user.avatar\n                    },\n                    message: {\n                        text: data.message.text\n                    }\n                }\n            }\n\n            listener && listener(data)\n        });\n    }\n\n    onError(listener: (data: any) => void) {\n        this.config.socket.on('error', (data) => {\n            listener && listener(data.message)\n        });\n    }\n\n    release() {\n        this.config.socket.emit('room.leave', { channelId: this.config.channelId })\n\n        this.config.socket.off('message')\n        this.config.socket.off('error')\n\n    }\n}\n\nexport default Chat"]}},"error":null,"hash":"a0330ca6c45b51f6e7baf0e0a5962b2b","cacheData":{"env":{}}}